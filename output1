public ActionForward showAccEchequeOtherKTB(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        TransferForm forms = (TransferForm) form;
        String forwardMapping = PAGE_ERROR;

        try {
            //Tracking Parameter
            TrackParameter trackParam = new TrackParameter(request.getSession(), CLASS_NAME + "showAccEchequeOtherKTB");
            trackParam.commonTrack();

            //clearSession(request);
            ArrayList toAcc = new ArrayList();
            StringBuffer xml = new StringBuffer();
            DecimalFormat df = new DecimalFormat("00");
            ResourceBundle bundle = ResourceBundle.getBundle("FundTransferMessages", (Locale) request.getSession(false).getAttribute("org.apache.struts.action.LOCALE"));

            if (request.getSession(false).getAttribute("echeque_3rdAccount") == null) {
                eChequeIssueController controller = forms.getEchequeIssueController();
                controller.setControllerRequest(request);
                ActionForward forward = controller.begin();
                ActionForward forward2 = null;
                if (forward.getPath().equals("success")) {
                    forward2 = controller.accountInq(null);
                    if (!forward2.getPath().equals("success")) {
                        response.setContentType("text/xml;charset=UTF-8");
                        response.setHeader("Cache-Control", "no-cache");
                        response.setDateHeader("Expires", -1);

                        xml.append("<DATAS>");
                        xml.append("</DATAS>");
                        request.setAttribute("xml", xml.toString());
                        forwardMapping = PAGE_GEN_XML;
                        return mapping.findForward(forwardMapping);
                    }

                } else if (!forward.getPath().equals("success")) {
                    response.setContentType("text/xml;charset=UTF-8");
                    response.setHeader("Cache-Control", "no-cache");
                    response.setDateHeader("Expires", -1);

                    xml.append("<DATAS>");
                    xml.append("</DATAS>");
                    request.setAttribute("xml", xml.toString());
                    forwardMapping = PAGE_GEN_XML;
                    return mapping.findForward(forwardMapping);
                }
            }

            toAcc = (ArrayList) request.getSession(false).getAttribute("echeque_3rdAccount");
            if (toAcc != null) {
                response.setContentType("text/xml;charset=UTF-8");
                response.setHeader("Cache-Control", "no-cache");
                response.setDateHeader("Expires", -1);

                xml.append("<DATAS>");
                int count = 0;
                String accNo = "";
                String alias = "";
                String bankName = "";
                String acctType = "";
                String acctName = "";
                String mobilePayee = "";
                for (int i = 0; i < toAcc.size(); i++) {
                    accNo = "";
                    alias = "";
                    bankName = "";
                    acctType = "";
                    acctName = "";
                    mobilePayee = "";

                    CustPayeeRecType custPayeeRecType = (CustPayeeRecType) toAcc.get(i);

                    accNo = AccountFormatter.formatAccountNumberWithBank(custPayeeRecType.getXferPayee().getDepAcctIdTo());
                    bankName = "";

                    try {
                        acctType = bundle.getString(custPayeeRecType.getXferPayee().getDepAcctIdTo().getProdGrp());
                    } catch (Exception ex) {
                    }

                    acctName = (custPayeeRecType.getXferPayee().getDepAcctIdTo().isSetAcctName()) ? custPayeeRecType.getXferPayee().getDepAcctIdTo().getAcctName() : "";
                    alias = (custPayeeRecType.getXferPayee().isSetAlias()) ? custPayeeRecType.getXferPayee().getAlias() : "";
                    alias = alias.equals("") ? acctName : alias;

                    xml.append("        <DATA>");
                    xml.append("		<INDEX>" + count + "</INDEX>");
                    xml.append("		<INDEX-DELETE>" + i + "</INDEX-DELETE>");
                    xml.append("		<OID>E_OTHERKTB" + df.format(i) + "</OID>");
                    xml.append("		<ALIAS>" + ValidateFormUtil.replaceSpecailCharacterXML(alias) + "</ALIAS>");
                    xml.append("		<TYPE>" + acctType + "</TYPE>");
                    xml.append("		<TYPEID>" + custPayeeRecType.getXferPayee().getDepAcctIdTo().getProdGrp() + "</TYPEID>");
                    xml.append("        <ACCID>" + custPayeeRecType.getXferPayee().getDepAcctIdTo().getAcctId() + "</ACCID>");
                    xml.append("		<ACCOUNTNO>" + ValidateFormUtil.replaceSpecailCharacterXML(accNo) + "</ACCOUNTNO>");
                    xml.append("		<ACCOUNTNOTEMP>" + ValidateFormUtil.replaceSpecailCharacterXML(custPayeeRecType.getXferPayee().getDepAcctIdTo().getAcctId()) + "</ACCOUNTNOTEMP>");
                    xml.append("		<ACCOUNTNAME>" + ValidateFormUtil.replaceSpecailCharacterXML(acctName) + "</ACCOUNTNAME>");
                    xml.append("		<TELNO>" + mobilePayee + "</TELNO>");
                    xml.append("		<LOGO></LOGO>");
                    xml.append("		<BANK>" + ValidateFormUtil.replaceSpecailCharacterXML(bankName) + "</BANK>");
                    xml.append("	</DATA>");

                    count++;
                }

                xml.append("</DATAS>");

            } else {
                response.setContentType("text/xml;charset=UTF-8");
                response.setHeader("Cache-Control", "no-cache");
                response.setDateHeader("Expires", -1);

                xml.append("<DATAS>");
                xml.append("</DATAS>");
            }
            request.setAttribute("xml", xml.toString());
            forwardMapping = PAGE_GEN_XML;

        } catch (Exception e) {
            LogUtil.getLogger(LogConstants.INFRA).error("Exception!", e);
        }

        return mapping.findForward(forwardMapping);
    }